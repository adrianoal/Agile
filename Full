---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
			-- Agile desmistificando com Scrum, XP, Kanban, Spotify e Trello -- 
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

1.0101 Apresentação

 o Professor sugeriu comecar pesquisando sobre o Trello .
 
 
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
Seção 16: Bônus O mínimo que você precisa saber para Usar o Trello 

222.BN01 Criando Uma Conta No Trello 

 Link para criação de conta: https://trello.com/
 
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
223.BN02 Criando Um Time e Adicionando Membros


Usuario: zqovynwh@pokemail.net
Senha:	 zqovynwh@pokemail.net

Usuario: gxruagaq@pokemail.net
Senha: gxruagaq@pokemail.net

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
224.BN03 Criando Um Quadro(Board)

 My First Board


---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
225.BN04 Criando Listas e Cartões 

Tarefa 3
Tarefa 4
Tarefa 5
Tarefa 6
Tarefa 7
Tarefa 8
Tarefa 9

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
Seção 2: O Modelo Tradicional

2.0201 Um pouco de história - A Crise Do Software E As Primeiras Metodologias 

 * Para entender o que é Agile, é necessario entender um pouco de história.
 
 No Final dos anos 60 e início dos anos 70, a capacidade de hardware começou a evoluir em uma
 velocidade gigantesca e o desenvolvimento de software que até então não tinha nenhuma 
 metodologia para se baser, isso começou a ficar inviável, porque os projetos começaram a 
 crescer e com isso a dimenssão dos projetos ficou cada vez mais complexa.
 A quantidade de dinheiro, falha e tempo começou a ser um problema, principalmente porque
 não podia perder tempo.

  Com isso começou a detalhar cada etapa de um projeto, com isso gerou o que se chamam de crise
  do software.
  
  A crise do Software foi exatamente isso, os projetos cresceram demais, o hardware cresceu 
  demais, porém, a capacidade de desenvolver software de acordo com esse poder que foi dado, 
  começou a causar problemas, neste momento começou a criar as primeiras metodologias de 
  desenvolvimento software.
  
  
Referências Bibiográficas:

Engenharia de Software 
	Uma abordagem profissional 8º Ediçao
Autor: Roger S.Pressman 
	   Bruce R. Maxim

Em média R$170,00 - Americanas

------------------------------
------------------------------
Utilizando UML e padrões 3º Edição
Autor: Craig Larman 
Prefácio de Philippe Kruchten

-- Verificar no Kindle
------------------------------
------------------------------

Pesquisar na estante virtual

https://www.estantevirtual.com.br/carrinho




---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
3.0202 As Principais Características Das Metodologias Tradicionais 


  -- REPRESENTAÇÃO SIMPLIFICADA DO PROCESSO:
  ------------------------------------------
  
   * Conjunto de práticas recomendadas para o desenvolvimento de software.
   * Auxiliar no desenvolvimento de software.
   * Metodologias Tradicionais e Metodologias Ágeis.
   
   
   Modelo Tradicional 
					X  
					 Modelo Ágil 
   --------------------------------
   

   Modelo Tradicional:
				* Forte Hierarquia
				* Pouca Autonomia
				* Competência Duvidosa
				* Burocracia
				
   Isso acaba impactando porque tudo depende de aprovação, a criatividade fica um pouco ingessada.
   Outro ponto importante, é que geralmente quem aprova, não sabe o que está aprovando, com isso
   acabava impactando os times e acontecia com frequencia nas metodologias tradicionais.
   Tem que fazer documentação para tudo, tem que pedir autorização, enviar documentação, 
   enviar e-mail, formalizar tudo e não necessariamente vai contribuir para o desenvolvimento 
   do software.
   
    Em resumo no modelo Tradicional 80% das funcionalidades não são relevantes para o software
	produzido.
	
	Apenas 20% das funcionalidades eram realmente utilizadas.
	
	Fonte dessa informação: queio manifesto
		https://www.versionome.com/assets/img/files/CHAOSManifesto2013.pdf
		
   
    Um exemplo desse modelo é o pacote office, vem com um monte de recursos que raramente são 
	usados, com isso se tem um desperdício de dinheiro quando se desenvolve um funcionalidades
	que não será utilizada.

 Pesquisar --> sobre a lógica de pareto: 80%/20%
	20% das funcionalidades geram 80% do valor produto.
	
 O Princípio de Pareto, ou regra 80/20, é uma tendência que prevê que 80% dos efeitos surgem a 
 partir de apenas 20% das causas, podendo ser aplicado em várias outras relações de causa e 
 efeito.	
 
 Cerca de 20% do esforço que você dedica ao trabalho são responsáveis por 80% do seu desempenho, 
 20% dos produtos ou serviços que sua empresa comercializa retornam 80% do faturamento, 
 e 20% dos seus colaboradores garantem 80% dos resultados. 
 Esse é o famoso Princípio de Pareto, um padrão intrigante observado nos mais distintos cenários 
 e contextos.
	
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------	
5.0204 Estamos "Jogando" Com As Regras Erradas

 O grande problema do desenvolvimento de software é que quando vc tem muita hierarquiquia, muita
 burocracia, várias camadas de decisão, a mensagem não chega exatamente da forma que vc gostaria
 e a compreensão fica comprometida, além de acabar desenvolvendo coisas que não vão sendo 
 utilizadas.

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------	
5.0204 Estamos "Jogando" com As Regras Erradas

 Analogia no desenvolvimento de software.
 
 * Alguém vai lá, levanta os requisito, escreve um monte de documento e na hora de entregar as
   coisas são bem diferentes do esperado.
  
 * Qual é o problema?
		Geralmente se tem pouco dinheiro e pouco tempo.
		
 * Um dos principais poblemas é que fazer software, não é fazer prédio, porque não se pode tocar,
   não se pode visualisar, pq é algo intângível, e a engenharia de software tradicional encarava 
   dessa forma, como se fosse um projeto engenharia civil.
   
 
 CICLO DE DESENVOLVIMENTO TRADICIONAL:
 -------------------------------------
	
 Análise (Requisitos de Negócio)
	Design(Design Técnico)
		Desenvolvimento(Codificação e Testes)
			Lançamento(Aprovação do Cliente e Lançamento)
			
 * Nesse modelo só podia fazer  próxima etapa quando a anterior termina, com isso acarretava 
   bastante de problemas.
   
  Barry Boehn
  -----------
   Nos anos 80 Barry Boahn, criou um gráfico chamado CUSTO DA MUDANÇA.
   
   Esse gráfico mostra que a tendência pra manter um software vai aumentar ao longo do tempo,
   e se vc encontra um bug na hora da especificação, fica muito mais barato do encontrar ele
   depois de meses do desenvolvimento.
   
 Mudanças podem ser negativas, mas podem ser possitivas.
 
 * As pessoa veem mudanças de forma negativa e outras positivas, isso depende do ponto de vista
 Exemplo:
	O Gerente que envio dois vendedores para uma cidade onde ninguém usava chinelos, um acho 
	que não tinha o que fazer, o outro achou um excelente negócio, então tudo depende do ponto
	de vista.

 Existe um diferença muito grande entre o mundo físico e o digital.
 Exemplo:
  Se vc mandar desenvolver um hardware em vários países diferentes, o resultado vai sair mais 
  ou menos igual, se vc mandar desenvolver um software em países ou empresas diferentes, 
  os resultados serão diferentes.
  
  Outro exemplo, é sobre a AMAZON:
  
  É muito mais fácil entregar um livro digital do que físico.
  
  No Digital vc tem: 
					* Fluidez
					* Maleabilidade
					* Invisibilidade
					* Complexidade(Elementos distintos)
					* Baixo custo de manufatura (O preço de fazer uma cópia ou sem é o mesmo preço)
					* Rápida evolução
   
 A experiência de décadas seguindo pesadas práticas prescritivas tornou evidente que:
 
 * Os CLIENTES ou USUÁRIOS não tem certeza do que eles querem.
 
 * Eles tem DIFICULDADE DE EXPRESSA tudo o que querem e pensam.
 
 * Muitos DETALHES do que eles querem SÓ SERÃO REVELADOS DURANTE O DESENVOLVIMENTO.
 
 * Os DETALHES SÃO COMPLEXOS para as pessoas.
 
 * Na medida em que elas vêem o produto sendo contruído, ELAS MUDAM DE IDÉIA.
 
 * FORÇAS EXTERNAS trazem MUDANÇAS ou MELHORIAS nos requisitos.
 
 Quanto mais se aproxima do cliente/usuário é melhor, para minimizar os problemas.
 
 
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------	
6.0205 Referências Bibiográficas 


---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
Seção 3:O Modelo Ágil 

7.0301 O Surgimento Dos Métodos Ágeis 


 1º De tudo, um dos conceitos centrais Agile é a ENTREGA ANTECIPA DE VALOR COMERCIAL COM MENOS BUROCRACIA 
  Definição --> Alistair Cockburn
  
  Grandes Projetos = Grandes Riscos, assim surgiu o Agile 

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------  
8.0302 Eis que surge o Agile 

 METOTOLOGIAS ÁGEIS 
 
 * Surgiram no INÍCIO DOS ANOS 2000 propondo nova abordagem de desenvolvimento.
	Tem relatos de que no final dos anos 80 início de 90 já se tinha alguns projetos Ágeis...
 
 * Reação às metodologias tradicionais com o intuito DE CRIAÇÃO DE NOVAS ALTERNATIVAS.
 
 * Em 2001, 17 especialistas criaram a ALIANÇA ÁGIL  e através do manifesto Ágil, POPULARIZOU-SE o termo
   METODOLOGIA ÁGIL ou FRAMEWORK ÁGIL.


---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------  
9.0303 Características Fundamentais do Agile 

 1º FLEXIBILIDADE 
		Está sempre adapitando, sempre procurando reagir as mudanças, entender o feedback do cliente e 
		adapitar o projeto de acordo com isso.
		
 2º ITERATIVO e ICREMENTAL
		Ou seja, vc não faz o projeto todo de uma vez, se faz por parte até que no final de tudo se tem o resultado
		completo.
		
 -- ABORDAGEM CLÁSSICA vc. ABORDAGEM ÁGIL:
 -----------------------------------------
 
				CLÁSSICA				ÁGIL
 
DESENVOLVEDOR	Hábil 					Ágil 
CLIENTE			Pouco envolvido			Comprometido
REQUISITOS		Conhecidos, estáveis	Emergentes, mutáveis(Assume q as coisas mudam mesmo)
RETRABALHO		Caro					Mais barato
PLANEJAMENTO	Direciona resultados	Resultados o direcionam 
FOCO			Grandes projetos		Todos os tamanhos de projetos 
OBJETIVO		Controlar, em busca		Simplificar processo de desenvolvimento
				de alcançar o 
				planejado

 
 O manifesto Ágil é composto pela declaração de alguns valores e 12 princípios que fundamentam o desenvolvimento 
 ágil de software.
 
 Cada MÉTODO ÁGIL possui suas próprias práticas, entretanto TODOS em algum momento COMPARTILHAM dos VALORES e 
 PRINCÍPIOS declarados no MANIFESTO ÁGIL.
 
 
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
10.0304 O Manifesto Ágil 

 Link --> 	http://agilemanifesto.org/iso/ptbr/manifesto.html 
 
 Criado em Fevereiro de 2001 --> Snowbird Ski resort, Ttah 
 
 Kent Beck
 Mike Beedle
 Arie van Bennekum
 Alistair Cockburn
 Ward Cunnigham
 Martin Fowler
 James Grenning
 Jim Highhsmith
 Andrew Hunt
 Ron Jeffries
 Jon Kern
 Brian Marick
 Robert C. Martin
 Steve Mellor
 Ken Schwaber
 Jeff Sutherland
 Jeff Sutherland
 Dave Thomas 
 
 Indivíduos e interações   MAIS IMPORTANTE que processos e ferramentas 
 Software em funcionamento MAIS IMPORTANTE que documentação abrangente
 Colaboração com o cliente MAIS IMPORTANTE que negociação de contratos
 Responder a mudanças      MAIS IMPORTANTE que seguir um plano
 
 Ou seja, mesmo havendo valor nos itens à direita, valorizamos MAIS os itens à esquerda.
 
 
 OS 12 PRINCÍPIOS ÁGEIS 
 ----------------------
 
 1 - Nossa maior prioridade é SATISFAZER O CLIENTE através da entrega contínua e adiantada de software com valor 
     agregado.
	 
 2 - MUDANÇAS NOS REQUISITOS SÃO BEM VINDAS, mesmo tardeamente no desenvolvimento. 
     Processos ágeis tiram vantagens das mudanças visando vantagem competitiva para o cliente.
	 
 3 - ENTREGAR FREQUENTEMENTE SOFTWARE FUNCIONANDO, de poucas semanas a poucos meses, com preferência à menor escala
     de tempo.

 4 - PESSOAS DE NEGÓCIO E DESENVOLVEDORES DEVEM TRABALHAR diariamente EM CONJUNTO por todo o projeto.

 5 - Construa projetos em torno de INDIVÍDUOS MOTIVADOS. Dê a eles o ambiente e o suporte necessário e CONFIE 
     neles para fazer o trabalho.
	 
 6 - O método mais eficiente e eficaz de transmitir informações entre uma equipe de desenvolvimento é através de 
     CONVERSA FACE A FACE.	 
 
 7- SOFTWARE FUNIONANDO é a medida primária de progresso.

 8 - Os processos ágeis promevem DESENVOLVIMENTO SUSTENTÁVEL. Os patrocinadores, desenvolvedores e usuários devem 
     ser capazes de manter um ritmo constante indefinidamente.
	 
 9 - Contínua atenção À EXCELENCIA TÉCNICA E BOM DESIGN aumenta a agilidade

 10 - SIMPLICIDADE - a arte de maximinizar a quantidade de trabalho não realizado é essencial.
 
 11 - As melhores arquiteturas, requisitos e designs emergem de EQUIPES AUTO ORGANIZÁVEIS.
      Ex. Os software auto source, My SQL e etc...
	  
 12 - Em intervalos regulares, a equipe REFLETE SOBRE COMO SE TORNAR MAIS EFICAZ e então refina e ajusta seu 
      comportamento de acordo.

 	  
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
1.0305 Mudanças de Paradigma - Prefira Microincrementos 

 AGILE = ITERATIVO 		+ 		INCREMENTAL 
			|						|
			|						|
		Não tente fazer			Não construa tudo de uma vez 
		tudo certo desde
		o começo 
		
		
 Em resumo a idéia e fazer pequenas entregas, entregas VERTICAIS.
 
 Exemplo:
 
 CLIENT X X X X 
 SERVER X X X 
 DB X X X  Até o produto ficar pronto(Produto)
 
 Mantenha as interações curtas (2-3 semanas)
 
 Com isso o gráfico do Barry Boehn "CUSTO DAS MUDANÇAS" a curva muda, vai caindo...
 
 
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
12.0306 Planejamento e Backlog 

 O planejamento é mais fácil com lançamentos frequentes
 
 No Cascata a entrega é feita somente no final
	Define --------> Build --------> Release
 
 
 No Agil entrega valor gradativamente a cada release
  
  Define ---> Build ---> Release    
	Define ---> Build ---> Release
		Define ---> Build ---> Release
			Define ---> Build ---> Release
			
 
 
 Obs: Aceite! As estimativas são quase sempre erradas!
 
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
13.0307 Estimativas Ágeis 

 * Um fato que temos que encarar é que as funcionalidades tem tamanhos diferentes 
 
 Uma idéia é saber mensurar quantos cartões eu consigo entregar por release.
 
 Outra abordagem é estimar o tamanho.
 
 
 ESTRATÉGIA DE ESTIMATIVA ÁGIL
 
 * Não estime tempo.
 
	* Estime o TAMNHO RELATIVO das features
	* Meça a velocidade por sprint.
	* DERIVE o plano de release.
	
 *(Regra do Scrum) Estimativas feitas pelas pessoas QUE FARÃO O TRABALHO.
	* Não pelas pessoas que querem o trabalho feito.
	
 * Estime e reestime continuamente durante o projeto 
	* Não confie nas estimativas iniciais
	
 * Prefira comunicação verbal ao invés de especificações detalhadas e escritas.

 * Evite falsa precisão
	* Melhor estar mais ou menos certo do que precisamente errado.
	
	
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
14.0308 Entregando Valor 

 Features tem valor diferentes 
  E o valor é independente do tamanho 
  
  O ideal é discutir com o time e envolver alguém de negócio, a prioridade é as que trazem mais recursor(Capital).
  
  
 Menos é Mais

 A PERFEIÇÃO É ALCANÇADA, não quando há mais nada a acrescentar, mas QUANDO NÃO HÁ MAIS NADA PARA TIRAR. 
																				(Antoine de Saint-Exupery)
	
	
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
Seção 4: O Kanban Na Toyota 

15.0401 O Kanban na Toyota 

 Como o Kanban surgiu e foi aplicado inicialmente?
 
 1º Surgiu na Toyota para evitar desperdício, e foi baseado na idéia de duas pessoas:
 
 Willian Edwards Deming 
	--> Ele melhorou o sistema de produção americano, durante a segunda guerra mundial, melhorou a 
	    qualidade do produto e o desperdício. 
		Quando a gerra acabou, o Japão estava arrasado e ele foi um dos consultores, da industria Japonesa,
		contreatado para encontrar meios de melhorar a produção, melhorar a qualidade e recuperar a economia 
		do Japão.
		Willian Edwards Deming é considerado o estrangeiro mais importante do Japão, só para entender a 
		importância dele.
 
 Taiichi Ohno 
	Era um diretor da Toyota que foi influenciado pelo  (Willian Edwards Deming).
	Eles identificaram uma série de pontos que podiam melhorar através do Sistema Kanban.

 MÉTODO TRADICIONAL DE ABASTECIMENTO
 
 Alguém, dentro de uma sala, longe das linhas de montagem, compra o material e manda colocar próximo à produção,
 Com isso, vai se estocando material, e se tem perda, porque é dinheiro que fica parado.
 
 Esse sistema era ruim, conhecido como EMPURRAR PRODUÇÃO, porque vai lá fabrica e coloca no mercado, independente
 de parâmetros de consumo.
 Até o início dos anos 50 tudo bem fazer isso, porque a demanda não era tão grande.
 
 Como o passar do tempo passou a ser ter concorrência, estão esse sistema não fazia mais sentido, porque
 estocar é prejuízo.
 
 DESVANTAGENS DO MÉTODO TRADICIONAL 
 -----------------------------------
 
 * O estoque nunca estsrá totalmente ajustado à produção: Ou falta ou sobra material 
 * O controle é mais difícil, sendo necessário um estoque de segurança maior.
 * Há necessidade de uma grande área física destinada ao estoque de material
 * O controle de estoque será mais complicado, portanto, exige pessoal especializado, designado exclusivamente
   para essa atividade.
 * Não se aproveita a experiência dos funcionários que realmente utilizam o estoque na montagem dos produtos.

  
---------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------- 
16.0402 Taiichi Ohno e a História do Kanban 

 * O Japão foi o primeiro país a observar detalhadamente as desvantagens do sistema tradicional de abastecimento.
 
 * A idéia de Taiichi Ohno, da Toyota, quando ele observou um supermercado. 
   
 -- As mercadorias distribuídas em prateleiras 
 -- A mercadoria necessária era retirada pelo consumidor
 -- A reposição era feita à medida que os produtos eram vendidos 
 
 COMO SURGIU A PALAVRA KANBAN?
 
 Kanban, em Japonês significa: REGISTRO VISUAL
 
 CARACTERÍSTICAS DO KANBAN:
 
 O ESPAÇO VAZIO ou número de cartões DETERMINA a NECESSIDADE de REPOSIÇÃO.
 

---------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------- 
17.0403 Os sistemas Puxados de Produção 

 Os sistemas EMPURRADOS de produção só funcionavam enquanto não tinha concorrência, se fabricavam vendeu vendeu
 se não vendeu ficava parado a mercadoria.
 
 
 
 Com o passar do tempo passou para os sistemas PUXADOS de produção.
 
 A Análogia melhor que se pode fazer, é a medida que vendeu, a prateleira foi ficando vazia, vai abastecendo.
 
 
 
 Just in Time --> Significa fazer aquilo que ter que ser feito no momento certo.
  Obs: O Kanban é apenas uma das partes que compõem o Just in Time.
 
---------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------- 
18.0404 Referências Bibliográficas


Kanban e Scrum 
 Obtendo o melhor de ambos 
 
 
Kanban 
	em 10 passos 
Autor: Jesoer Boeg 


Scrum e XP direto das Trincheiras 
	Como nós fazemos o Scrum 
Autor: Henrik Kniberg 
Mostra como se aplica o Scrum no empresa Spotfy



Extreme Programming 
3ºEdição
Autor: Vinícius Manhães Teles 



SCRUM A Arte de fazer o dobro do trabalho na metade do tempo 
Autor: Jeff Sutherland 


Programação e Trema(XP)
Acolha as mudanças
Autor: Kent beck

---------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------- 
Seção 5: O Kanbam no Agile 

19.0501 O Kanban no Agile 

 Como foi implementado no desenvolvimento de software?
 
 Inicialmente foi implementado na fabrica da Toyota.
 Um dos resposáveis por introduzir o Kanban no desenvolvimento de software por volta de 2008 
foi o DAVID ANDERSON.

 O Scrum e o XP já tinham um quadro antes, porém, não atendia as exigencias, nesta época 
 DAVID ANDERSON trabalhava na Microssoftware.
 
 Bibiográfias:
 
 David J. Anderson 
			Lessons in AGILE MANAGEMENT On the Road to Kanban
			
 David J. Anderson 
			Kanban Evolutionáres Change Management 
			
 David J. Anderson 
			Kanban Successful Evolutionary Change for your Technology Bussiness
			
 Alguns desses livros tem em versões em português outros não.


 Vale destacar JESPER BOEG da Triforce um  Dinamarques

 JESPER BOEG
			Kanban em 10 Passos
			
			
 Qual a proposta do Kanban? 
 É fazer a evolução de um processo já existente, ou seja, eu posso aplicar o Kanban em um 
 projeto cascata por exemlo, não é restritivo. A vantagem é que não rompe com hierarquia,
 é menos traumático adotar o Kanban pra depois ir para o XP ou Scrum.
 Kanban é o primeiro passo pra quem quer adotar metodologias Ágeis no seu processo, pra depois
 ir para os outros frameworks...
 
 Todo processo é diferente, portanto, suas restrições também são!
 
 A evolução deve ser contextualizada como é na natureza, de forma muito natural.
 
 Deve acompanhar o efeito das mudanças.
 
 Mudar por mudar não faz sentido. Tenha um objetivo em vista.
 
 Kanban = Cartão Sinalizador
 
 
 PRESCRITIVO(Uma série de regras) 
  RUP
  (120)
		XP
		(13)
			SCRUM
			(9)
				Kanban
				 (3/5)
					WHATEVER
					    (0)
 ADAPTATIVO
			
			
			
 
 
 






	












 
 
 
 
 
 
 
 
 




























   
    
 
























